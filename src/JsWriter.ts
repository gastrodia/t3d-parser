import * as fs from 'fs';
import * as path from 'path';
import {mkdirs} from './FileUtil';

var stringify = function(obj) {
  var placeholder = '____PLACEHOLDER____';
  var fns = [];
  var json = JSON.stringify(obj, function(key, value) {
    if (typeof value === 'function') {
      fns.push(value);
      return placeholder;
    }
    return value;
  }, 3);
  json = json.replace(new RegExp('"' + placeholder + '"', 'g'), function(_) {
    return fns.shift();
  });
  return json;
};


export class JsWriter {
   private jsObject;
   constructor(file?: string) {
      //readFile
      if (file && fs.existsSync(file)) {
         var jsContent = fs.readFileSync(file, 'utf8');
         this.jsObject = this.parseLayout(jsContent);
      } else {
         this.jsObject = {};
      }

   }

   public set(key, object) {
      this.jsObject[key] = object;
   }

   /** 解析js*/
   private parseLayout(layoutStr: string) {
      var evalLayout = function () {
         var evalStr = `
                    (function(exports){
                        ${layoutStr}
                        return exports;
                    })({});
                `;
         return eval(evalStr);
      }
      return evalLayout();
   }

   private toFileString() {
      var str =
         `//generated by t3d-parser
`
      for (var key in this.jsObject) {
         str +=
            `

exports.${key} = ${stringify(this.jsObject[key])}
`
      }
      return str;
   }

   public writeToFile(file: string) {
      var dir = path.dirname(file);
      mkdirs(dir, null, () => {
         fs.writeFileSync(file, this.toFileString(), 'utf8');
      })

   }
}